# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Build

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - name: Using secrets action
        env:
          SUPER_SECRET: ${{ secrets.TESTING_DEPLOYMENT_KEY }}
        run: |
          echo "Got here"
  terraform:
    needs: [build]
    runs-on: ubuntu-20.04
    name: Setup terraform
    steps:
      - uses: actions/checkout@v2
      - name: Install terraform
        env:
          TERRAFORM_VERSION: "0.14.9"
        run: |
          tf_version=$TERRAFORM_VERSION
          wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
          unzip terraform_"$tf_version"_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
      - name: Verify Terraform version
        run: terraform --version
      - name: Terraform init
        run: |
          cd terraform-deploy
          terraform init -input=false

      - name: Terraform validation
        run: |
          cd terraform-deploy
          terraform validate

      - name: Terraform plan
        run: |
          cd terraform-deploy
          terraform plan -var "do_token=${{ secrets.TESTING_DEPLOYMENT_KEY }}" -var "pvt_key=$HOME/.ssh/id_rsa"

      - name: Terraform apply
        run: |
          cd terraform-deploy
          mkdir /home/runner/.ssh
          echo "${{ secrets.DO_SSH_PRIV }}" > /home/runner/.ssh/priv_key_test
          echo "${{ secrets.DO_SSH_PUB }}" > /home/runner/.ssh/priv_key_test.pub
          chmod 600 /home/runner/.ssh/priv_key_test
          cd /home/runner/work/hello-world-ci-cd/hello-world-ci-cd/application
          GIT_SSH_COMMAND='ssh -i /home/runner/.ssh/priv_key_test' git clone git@github.com:s1lv3rsph3r3/packetpigeon.git
          cd /home/runner/work/hello-world-ci-cd/hello-world-ci-cd
          echo "yes" | terraform apply -var "do_token=${{ secrets.TESTING_DEPLOYMENT_KEY }}" -var "pvt_key=${{ secrets.DO_SSH_PRIV }}" -var "pvt_key_file=/home/runner/.ssh/priv_key_test"

      - name: Clean .ssh files
        run: |
          rm -rf /home/runner/.ssh
