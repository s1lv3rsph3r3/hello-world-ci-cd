# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Build

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          cd ~
          wget https://github.com/digitalocean/doctl/releases/download/v1.57.0/doctl-1.57.0-linux-amd64.tar.gz
          tar xf ~/doctl-1.57.0-linux-amd64.tar.gz
          sudo mv ~/doctl /usr/local/bin

      - name: Using secrets action
        env:
          SUPER_SECRET: ${{ secrets.TESTING_DEPLOYMENT_KEY }}
        run: |
          echo "Got here"
  terraform:
    needs: [build]
    runs-on: ubuntu-20.04
    name: Setup terraform
    steps:
      - uses: actions/checkout@v2
      - name: Install terraform
        env:
          TERRAFORM_VERSION: "0.14.9"
        run: |
          tf_version=$TERRAFORM_VERSION
          wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
          unzip terraform_"$tf_version"_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
      - name: Verify Terraform version
        run: terraform --version
      - name: Terraform init
        run: |
          cd terraform-deploy
          terraform init -input=false

      - name: Terraform validation
        run: |
          cd terraform-deploy
          terraform validate

      - name: Terraform plan
        run: |
          cd terraform-deploy
          terraform plan -var "do_token=${{ secrets.TESTING_DEPLOYMENT_KEY }}" -var "pvt_key=$HOME/.ssh/id_rsa"

      - name: Terraform apply
        run: |
          cd terraform-deploy
          echo "yes" | terraform apply -var "do_token=${{ secrets.TESTING_DEPLOYMENT_KEY }}" -var "pvt_key=${{ secrets.DO_SSH_PRIV }}"

  deploy:
    needs: [terraform]
    runs-on: ubuntu-20.04
    name: Node ${{ matrix.node }} sample
    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          check-latest: true
      - run: npm install
      - run: node droplet-creation.js
        env:
          DO_AUTH_TOKEN: ${{ secrets.DO_AUTH_TOKEN }}
