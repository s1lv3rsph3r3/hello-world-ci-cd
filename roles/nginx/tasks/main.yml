---
- name: Install Nginx
  apt: name=nginx update_cache=yes state=latest

# This needs to be upgraded to allow the port to be open before using nginx
# UFW Configuration
- name: "UFW - Allow HTTP on port {{ https_port }}"
  ufw:
    rule: allow
    port: "{{ https_port }}"
    proto: tcp

- name: Removes "default" site
  file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  notify: Reload Nginx

# Need to stop the nginx service to allow for the certificate to be generated
- name: Stop nginx to allow for letsencrypt
  service: name=nginx state=stopped

- name: Install zip
  shell: apt install zip

- name: Generate dhparams
  shell: openssl dhparam -out /etc/nginx/dhparams.pem 2048
  args:
    creates: /etc/nginx/dhparams.pem

# install core
- name: Install snap core
  shell: snap install core

- name: Refresh snap core
  shell: snap refresh core

# Remove default os certbot
- name: Install snap core
  shell: apt-get remove certbot

- name: Install snap classic certbot
  shell: snap install --classic certbot

# Link certbot
- name: Link certbot
  shell: ln -s /snap/bin/certbot /usr/bin/certbot

# Snap trust plugin
- name: Snap trust plugin
  shell: snap set certbot trust-plugin-with-root=ok

# Snap cloudflare plugin
- name: Snap cloudflare plugin
  shell: snap install certbot-dns-cloudflare

# mkdir secrets
- name: Make directory secrets
  shell: mkdir ~/.secrets

# make file
- name: Make cloudflare.ini file
  shell: touch ~/.secrets/cloudflare.ini

# Print the email to cloudflare file
- name: Print the email to the cloudflare file
  shell: printf "dns_cloudflare_email = {{ letsencrypt_email }}\\n" >> ~/.secrets/cloudflare.ini

- name: Print the secret to the cloudflare file
  shell: printf "dns_cloudflare_api_key = {{ dns_cloudflare_api_key }}\\n" >> ~/.secrets/cloudflare.ini

# Call on cloudflare to approve ssl cert
- name: Certbot cloudflare create and validate certs
  shell: certbot certonly --dns-cloudflare --dns-cloudflare-credentials ~/.secrets/cloudflare.ini --dns-cloudflare-propagation-seconds 60 -m {{ letsencrypt_email }} -n --agree-tos -d {{ http_host }} -d www.{{ http_host }} --dry-run

- name: Download file from S3 bucket
    s3: aws_access_key="{{ aws_access_key }}" aws_secret_key="{{ aws_secret_key }}" bucket=temp-cert-store object=/cert_bundle.zip dest=~/cert_bundle.zip mode=get

- name: Remove inside of letsencrypt
  shell: rm -rf /etc/letsencrypt/*

- name: Make temp_for_extract
  shell: mkdir ~/temp_for_extract

- name: Unbundle and apply cert bundle
  shell: unzip cert_bundle.zip -d temp_for_extract

- name: Copy over all certs
  shell: cp -r temp_for_extract/etc/letsencrypt/* /etc/letsencrypt

- name: Remove options stuff
  shell: rm /etc/letsencrypt/options-ssl-nginx.conf

- name: Creates nginx ssl options
  template:
    src: "options-ssl-nginx.conf.j2"
    dest: "/etc/letsencrypt/options-ssl-nginx.conf"

#- name: Install system nginx config
#  template:
#    src: templates/nginx.conf.j2
#    dest: /etc/nginx/nginx.conf

# Nginx Configuration
- name: Sets Nginx conf file
  template:
    src: "nginx.conf.j2"
    dest: "/etc/nginx/sites-available/{{ http_host }}"

- name: Enables new site
  file:
    src: "/etc/nginx/sites-available/{{ http_host }}"
    dest: "/etc/nginx/sites-enabled/{{ http_host }}"
    state: link
  notify: Restart Nginx

# This needs to be removed to let the certificate be created
#- name: Reload nginx to activate letsencrypt site
#  service: name=nginx state=restarted
#
#- name: Create letsencrypt certificate
#  shell: letsencrypt certonly -n --webroot -w /var/www/packetpigeon -m {{ letsencrypt_email }} --agree-tos -d {{ http_host }}
#  args:
#    creates: /etc/letsencrypt/live/{{ http_host }}

#- name: Add letsencrypt cronjob for cert renewal
#  cron:
#    name: letsencrypt_renewal
#    special_time: weekly
#    job: letsencrypt --renew certonly -n --webroot -w /var/www/packetpigeon -m {{ letsencrypt_email }} --agree-tos -d {{ http_host }}
#  notify: Reload Nginx

# This needs to be removed to allow the certificate to be renewed
- name: Reload nginx to activate specified site
  service: name=nginx state=restarted
